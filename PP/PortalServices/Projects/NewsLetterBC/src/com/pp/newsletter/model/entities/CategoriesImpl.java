package com.pp.newsletter.model.entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 22 10:44:20 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CategoriesImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CategoriesId {
            public Object get(CategoriesImpl obj) {
                return obj.getCategoriesId();
            }

            public void put(CategoriesImpl obj, Object value) {
                obj.setCategoriesId((String)value);
            }
        }
        ,
        CategoriesName {
            public Object get(CategoriesImpl obj) {
                return obj.getCategoriesName();
            }

            public void put(CategoriesImpl obj, Object value) {
                obj.setCategoriesName((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(CategoriesImpl object);

        public abstract void put(CategoriesImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CATEGORIESID = AttributesEnum.CategoriesId.index();
    public static final int CATEGORIESNAME = AttributesEnum.CategoriesName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CategoriesImpl() {
    }

    /**
     * Gets the attribute value for CategoriesId, using the alias name CategoriesId.
     * @return the CategoriesId
     */
    public String getCategoriesId() {
        return (String)getAttributeInternal(CATEGORIESID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoriesId.
     * @param value value to set the CategoriesId
     */
    public void setCategoriesId(String value) {
        setAttributeInternal(CATEGORIESID, value);
    }

    /**
     * Gets the attribute value for CategoriesName, using the alias name CategoriesName.
     * @return the CategoriesName
     */
    public String getCategoriesName() {
        return (String)getAttributeInternal(CATEGORIESNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoriesName.
     * @param value value to set the CategoriesName
     */
    public void setCategoriesName(String value) {
        setAttributeInternal(CATEGORIESNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param categoriesId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String categoriesId) {
        return new Key(new Object[]{categoriesId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.pp.newsletter.model.entities.Categories");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("CATG_SEQ",getDBTransaction());
        String val = "PP"+seq.getSequenceNumber();
        this.setCategoriesId(val);
    }
}
