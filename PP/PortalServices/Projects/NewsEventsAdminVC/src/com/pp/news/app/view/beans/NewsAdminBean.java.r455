package com.pp.news.app.view.beans;

import oracle.adf.view.rich.component.rich.input.RichInputDate;
import oracle.adf.view.rich.component.rich.input.RichInputText;

import oracle.stellent.ridc.model.DataBinder;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import java.io.OutputStream;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;

import oracle.binding.BindingContainer;

import oracle.binding.OperationBinding;

import oracle.jbo.ApplicationModule;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;

import oracle.jbo.domain.Number;

import oracle.stellent.ridc.IdcClient;
import oracle.stellent.ridc.IdcClientException;
import oracle.stellent.ridc.IdcClientManager;
import oracle.stellent.ridc.IdcContext;
import oracle.stellent.ridc.model.DataObject;
import oracle.stellent.ridc.model.DataResultSet;
import oracle.stellent.ridc.model.TransferFile;
import oracle.stellent.ridc.protocol.ServiceResponse;

import org.apache.commons.io.IOUtils;
import org.apache.myfaces.trinidad.model.UploadedFile;

public class NewsAdminBean {
    private String username;
    private String password;
    private String url;
    private IdcClient idcClient;
    private IdcContext userContext;
    private oracle.stellent.ridc.model.DataBinder binder;
    private UploadedFile uploadFile;
    private String did;
    private String vid = "N";
    private String vdate = "N";
    private String vsubj = "N";
    private String vdesc = "N";
    private String vdet = "N";
    private String b_dis = "N";
    private RichInputText b_nid;
    private RichInputDate b_ndate;
    private RichInputText b_nsubj;
    private RichInputText b_ndesc;
    private RichInputText b_ndet;
    private String fileName;

    public NewsAdminBean() {
        super();
        intiateConnection();
    }

    public void setUploadFile(UploadedFile uploadFile) {
        this.uploadFile = uploadFile;
    }

    public UploadedFile getUploadFile() {
        return uploadFile;
    }

    public String publish_action() {
        if (this.getB_ndate().getValue() != null &&
            this.getB_ndesc().getValue() != null &&
            this.getB_ndet().getValue() != null && this.getB_nid() != null &&
            this.getB_nsubj() != null) {
            ViewObject newsview =
                this.getAm().findViewObject("NewsDetailsView1");
            Row newsrow = newsview.getCurrentRow();
            Object docid = newsrow.getAttribute("NewsId");
            String docids = docid.toString();
            filename(docids);
            uploadedFile(docids);
            newsrow.setAttribute("NewsUcmId", did);
            BindingContext bctx = BindingContext.getCurrent();
            BindingContainer bindings = bctx.getCurrentBindingsEntry();
            OperationBinding ob = bindings.getOperationBinding("Commit");
            ob.execute();
            if (!ob.getErrors().isEmpty()) {
                FacesContext facesContext = FacesContext.getCurrentInstance();
                facesContext.addMessage("News has not published",
                                        new FacesMessage(FacesMessage.SEVERITY_INFO,
                                                         "News has not published",
                                                         "Kindly contact administrator"));
                facesContext.renderResponse();
            } else {
                FacesContext facesContext = FacesContext.getCurrentInstance();
                facesContext.addMessage("News has been published",
                                        new FacesMessage(FacesMessage.SEVERITY_INFO,
                                                         "News has been published",
                                                         "News has been published"));
                facesContext.renderResponse();
                b_dis = "Y";
            }
        }
        if (this.getB_ndate().getValue() == null) {
            vdate = "Y";
        }
        if (this.getB_ndesc().getValue() == null) {
            vdesc = "Y";
        }
        if (this.getB_ndet().getValue() == null) {
            vdet = "Y";
        }
        if (this.getB_nid().getValue() == null) {
            vid = "Y";
        }
        if (this.getB_nsubj().getValue() == null) {
            vsubj = "Y";
        }
        return null;
    }

    public String publish_action_ar() {
        if (this.getB_ndate().getValue() != null &&
            this.getB_ndesc().getValue() != null &&
            this.getB_ndet().getValue() != null && this.getB_nid() != null &&
            this.getB_nsubj() != null) {
            ViewObject newsview =
                this.getAm().findViewObject("NewsDetailsArView1");
            Row newsrow = newsview.getCurrentRow();
            Object docid = newsrow.getAttribute("NewsId");
            String docids = docid.toString();
            filename(docids);
            uploadedFile(docids);
            newsrow.setAttribute("NewsUcmId", did);
            BindingContext bctx = BindingContext.getCurrent();
            BindingContainer bindings = bctx.getCurrentBindingsEntry();
            OperationBinding ob = bindings.getOperationBinding("Commit");
            ob.execute();
            if (!ob.getErrors().isEmpty()) {
                //            FacesContext facesContext = FacesContext.getCurrentInstance();
                //            facesContext.addMessage("NoRecordsFound",
                //                                    new FacesMessage(FacesMessage.SEVERITY_INFO,
                //                                                     "No Records Found",
                //                                                     "No Orders matching searched criteria"));
                //            facesContext.renderResponse();
            } else {
                FacesContext facesContext = FacesContext.getCurrentInstance();
                facesContext.addMessage("News has been published",
                                        new FacesMessage(FacesMessage.SEVERITY_INFO,
                                                         "News has been published",
                                                         "News has been published"));
                facesContext.renderResponse();
                b_dis = "Y";
            }
        }
        if (this.getB_ndate().getValue() == null) {
            vdate = "Y";
        }
        if (this.getB_ndesc().getValue() == null) {
            vdesc = "Y";
        }
        if (this.getB_ndet().getValue() == null) {
            vdet = "Y";
        }
        if (this.getB_nid().getValue() == null) {
            vid = "Y";
        }
        if (this.getB_nsubj().getValue() == null) {
            vsubj = "Y";
        }
        return null;
    }

    public String filename(String newfile) {
        File file = null;
        OutputStream output = null;
        file = new File(newfile);
        try {
            output = new FileOutputStream(file);
            IOUtils.copy(uploadFile.getInputStream(), output);
            fileName = file.getName() + ".jpg";
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void intiateConnection() {
        try {
            //            this.username = "weblogic";
            //            this.password = "welcome1";
            //            this.url = "idc://192.168.3.113:4444";
            ViewObject configview =
                this.getAm().findViewObject("UcmConfigView1");
            configview.setNamedWhereClauseParam("utype", "N");
            configview.executeQuery();
            Row configrow = configview.first();
            username = (String)configrow.getAttribute("UcUsername");
            password = (String)configrow.getAttribute("UcPassword");
            String urlink = (String)configrow.getAttribute("UcUrl");
            String port = (String)configrow.getAttribute("UcPortno");
            url = urlink + ":" + port;
            IdcClientManager manager = new IdcClientManager();
            this.idcClient = manager.createClient(this.url);
            this.userContext = new IdcContext(this.username, this.password);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void uploadedFile(String docname) {
        ServiceResponse myServiceResponse = null;
        InputStream fileStream = null;
        String fileName1;
        ServiceResponse severiceResponse = null;
        try {
            //            String fileName = "C:\\Users\\yoga\\Desktop\\New folder\\UCMFileUpload.txt";
            //            fileStream = new FileInputStream(fileName);
            //            fileStream = new FileInputStream(uploadFile.getInputStream());
            fileStream = uploadFile.getInputStream();
            fileName1 = uploadFile.getFilename();
            long fileLength = new File(fileName1).length();
            DataBinder myRequestDataBinder =
                (DataBinder)this.idcClient.createBinder();
            myRequestDataBinder.putLocal("IdcService", "CHECKIN_UNIVERSAL");
            myRequestDataBinder.putLocal("dDocType", "Application");
            myRequestDataBinder.putLocal("dDocName", docname);
            // Title of the Uploaded file
            myRequestDataBinder.putLocal("dDocTitle", docname);
            // Name of Author
            myRequestDataBinder.putLocal("dDocAuthor", "weblogic");
            // Security for the content (Group and Account)
            myRequestDataBinder.putLocal("dSecurityGroup", "Public");
            myRequestDataBinder.putLocal("dDocAccount", "");
            myRequestDataBinder.putLocal("dFormat", "text/html");
            String collectionId =
                getCollectionIdByPath("/Contribution Folders/News");
            myRequestDataBinder.putLocal("xCollectionID", "" + collectionId);
            myRequestDataBinder.addFile("primaryFile",
                                        new TransferFile(fileStream, fileName,
                                                         fileLength,
                                                         "text/html"));
            //                        myRequestDataBinder.addFile("primaryFile",
            //                                        new TransferFile(fileStream, fileName,
            //                                                         fileLength,
            //                                                         "text/html"));
            myServiceResponse =
                    idcClient.sendRequest(userContext, (DataBinder)myRequestDataBinder);
            InputStream myInputStream = myServiceResponse.getResponseStream();
            String myResponseString = myServiceResponse.getResponseAsString();
            DataBinder myResponseDataBinder =
                (DataBinder)myServiceResponse.getResponseAsBinder();
            did = myResponseDataBinder.getLocalData().get("dID");
            System.out.println("Get the document id :: " + did);
            System.out.println("Get the document url :: " +
                               getURLFromdID(did));
        } catch (IdcClientException idcce) {
            System.out.println("IDC Client Exception occurred. Unable to upload file. Message: " +
                               idcce.getMessage() + ", Stack trace: ");
            idcce.printStackTrace();
        } catch (IOException ioe) {
            System.out.println("IO Exception occurred. Unable to upload file. Message: " +
                               ioe.getMessage() + ", Stack trace: ");
            ioe.printStackTrace();
        } catch (Exception e) {
            System.out.println("Exception occurred. Unable to upload file. Message: " +
                               e.getMessage() + ", Stack trace: ");
            e.printStackTrace();
        } finally {
            if (myServiceResponse != null) {
                myServiceResponse.close();
            }
            if (fileStream != null) {
                try {
                    fileStream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public String getCollectionIdByPath(String path) {
        String folderId = null;
        try {
            DataBinder dataBinder = this.idcClient.createBinder();
            dataBinder.putLocal("IdcService", "COLLECTION_INFO");
            dataBinder.putLocal("hasCollectionPath", "true");
            dataBinder.putLocal("dCollectionPath", path);
            ServiceResponse response =
                this.idcClient.sendRequest(new IdcContext(username),
                                           dataBinder);
            DataBinder serverBinder = response.getResponseAsBinder();
            DataResultSet resultSet = serverBinder.getResultSet("PATH");
            DataObject dataObject =
                resultSet.getRows().get(resultSet.getRows().size() - 1);
            folderId = dataObject.get("dCollectionID");
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
        }
        return folderId;
    }

    public String getURLFromdID(String dID) {
        ServiceResponse severiceResponse = null;
        this.binder = this.idcClient.createBinder();
        try {
            this.binder.putLocal("IdcService", "DOC_INFO");
            this.binder.putLocal("dID", dID);
            ServiceResponse response =
                idcClient.sendRequest(this.userContext, this.binder);
            DataBinder respBinder = response.getResponseAsBinder();
            return respBinder.getLocal("DocUrl");
        } catch (IdcClientException ice) {
            ice.printStackTrace();
        }
        return null;
    }

    private ApplicationModule getAm() {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data.NewsAppModuleServiceDataControl.dataProvider}",
                                            Object.class);
        return (ApplicationModule)valueExp.getValue(elContext);
    }

    public String clear_en_action() {
        this.setUploadFile(null);
        BindingContext bctx = BindingContext.getCurrent();
        BindingContainer bindings = bctx.getCurrentBindingsEntry();
        OperationBinding ob = bindings.getOperationBinding("Rollback");
        ob.execute();
        OperationBinding ob1 = bindings.getOperationBinding("CreateInsert");
        ob1.execute();
        return "clear";
    }

    public String clear_ar_action() {
        this.setUploadFile(null);
        BindingContext bctx = BindingContext.getCurrent();
        BindingContainer bindings = bctx.getCurrentBindingsEntry();
        OperationBinding ob = bindings.getOperationBinding("Rollback");
        ob.execute();
        OperationBinding ob1 = bindings.getOperationBinding("CreateInsert");
        ob1.execute();
        return "clear";
    }

    public void setVid(String vid) {
        this.vid = vid;
    }

    public String getVid() {
        return vid;
    }

    public void setVdate(String vdate) {
        this.vdate = vdate;
    }

    public String getVdate() {
        return vdate;
    }

    public void setVsubj(String vsubj) {
        this.vsubj = vsubj;
    }

    public String getVsubj() {
        return vsubj;
    }

    public void setVdesc(String vdesc) {
        this.vdesc = vdesc;
    }

    public String getVdesc() {
        return vdesc;
    }

    public void setVdet(String vdet) {
        this.vdet = vdet;
    }

    public String getVdet() {
        return vdet;
    }

    public void setB_nid(RichInputText b_nid) {
        this.b_nid = b_nid;
    }

    public RichInputText getB_nid() {
        return b_nid;
    }

    public void setB_ndate(RichInputDate b_ndate) {
        this.b_ndate = b_ndate;
    }

    public RichInputDate getB_ndate() {
        return b_ndate;
    }

    public void setB_nsubj(RichInputText b_nsubj) {
        this.b_nsubj = b_nsubj;
    }

    public RichInputText getB_nsubj() {
        return b_nsubj;
    }

    public void setB_ndesc(RichInputText b_ndesc) {
        this.b_ndesc = b_ndesc;
    }

    public RichInputText getB_ndesc() {
        return b_ndesc;
    }

    public void setB_ndet(RichInputText b_ndet) {
        this.b_ndet = b_ndet;
    }

    public RichInputText getB_ndet() {
        return b_ndet;
    }

    public void setB_dis(String b_dis) {
        this.b_dis = b_dis;
    }

    public String getB_dis() {
        return b_dis;
    }
}
